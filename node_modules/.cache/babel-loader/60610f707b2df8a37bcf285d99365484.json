{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _extends = Object.assign || function (target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i];\n\n    for (var key in source) {\n      if (Object.prototype.hasOwnProperty.call(source, key)) {\n        target[key] = source[key];\n      }\n    }\n  }\n\n  return target;\n};\n\nvar _index = require('../utils/index');\n\nfunction _toConsumableArray(arr) {\n  if (Array.isArray(arr)) {\n    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {\n      arr2[i] = arr[i];\n    }\n\n    return arr2;\n  } else {\n    return Array.from(arr);\n  }\n}\n/**\n * -------------------------------------------------------\n * Parallax Controller\n * -------------------------------------------------------\n *\n * The global controller for setting up window scroll/resize\n * listeners, managing and caching parallax element positions,\n * determining which elements are inside the viewport based on\n * scroll position, and then updating parallax element styles\n * based on min/max offsets and current scroll position.\n *\n */\n\n\nfunction ParallaxController() {\n  // All parallax elements to be updated\n  var elements = []; // Tracks current scroll y distance\n\n  var scrollY = 0; // Window inner height\n\n  var windowHeight = 0; // ID to increment for elements\n\n  var id = 0; // Ticking\n\n  var ticking = false; // Scroll direction\n  // let scrollDown = null;\n  // Passive support\n\n  var supportsPassive = (0, _index.testForPassiveScroll)();\n\n  function _addListeners() {\n    window.addEventListener('scroll', _handleScroll, supportsPassive ? {\n      passive: true\n    } : false);\n    window.addEventListener('resize', _handleResize, false);\n  }\n\n  function _removeListeners() {\n    window.removeEventListener('scroll', _handleScroll, supportsPassive ? {\n      passive: true\n    } : false);\n    window.removeEventListener('resize', _handleResize, false);\n  }\n\n  _addListeners();\n  /**\n   * Window scroll handler. Sets the 'scrollY'\n   * and then calls '_updateElementPositions()'.\n   */\n\n\n  function _handleScroll() {\n    // reference to prev scroll y\n    // const prevScrollY = scrollY;\n    // Save current scroll\n    scrollY = window.pageYOffset; // Supports IE 9 and up.\n    // direction\n    // scrollDown = scrollY > prevScrollY;\n    // Only called if the last animation request has been\n    // completed and there are parallax elements to update\n\n    if (!ticking && elements.length > 0) {\n      ticking = true;\n      window.requestAnimationFrame(_updateElementPositions);\n    }\n  }\n  /**\n   * Window resize handler. Sets the new window inner height\n   * then updates parallax element attributes and positions.\n   */\n\n\n  function _handleResize() {\n    _setWindowHeight();\n\n    _updateElementAttributes();\n\n    _updateElementPositions();\n  }\n  /**\n   * Creates a unique id to distinguish parallax elements.\n   * @return {Number}\n   */\n\n\n  function _createID() {\n    ++id;\n    return id;\n  }\n  /**\n   * Update element positions.\n   * Determines if the element is in view based on the cached\n   * attributes, if so set the elements parallax styles.\n   */\n\n\n  function _updateElementPositions() {\n    elements.forEach(function (element) {\n      if (element.props.disabled) return; // check if the element is in view then\n\n      var isInView = (0, _index.isElementInView)(element, windowHeight, scrollY); // set styles if it is\n\n      if (isInView) _setParallaxStyles(element); // reset ticking so more animations can be called\n\n      ticking = false;\n    });\n  }\n  /**\n   * Update element attributes.\n   * Sets up the elements offsets based on the props passed from\n   * the component then caches the elements current position and\n   * other important attributes.\n   */\n\n\n  function _updateElementAttributes() {\n    elements.forEach(function (element) {\n      if (element.props.disabled) return;\n\n      _setupOffsets(element);\n\n      _cacheAttributes(element);\n    });\n  }\n  /**\n   * Remove parallax styles from all elements.\n   */\n\n\n  function _removeParallaxStyles() {\n    elements.forEach(function (element) {\n      _resetStyles(element);\n    });\n  }\n  /**\n   * Cache the window height.\n   */\n\n\n  function _setWindowHeight() {\n    var html = document.documentElement;\n    windowHeight = window.innerHeight || html.clientHeight;\n  }\n  /**\n   * Takes a parallax element and caches important values that\n   * cause layout reflow and paints. Stores the values as an\n   * attribute object accesible on the parallax element.\n   * @param {object} element\n   */\n\n\n  function _cacheAttributes(element) {\n    var _element$offsets = element.offsets,\n        yMin = _element$offsets.yMin,\n        yMax = _element$offsets.yMax,\n        xMax = _element$offsets.xMax,\n        xMin = _element$offsets.xMin;\n    var slowerScrollRate = element.props.slowerScrollRate; // NOTE: Many of these cause layout and reflow so we're not\n    // calculating them on every frame -- instead these values\n    // are cached on the element to access later when determining\n    // the element's position and offset.\n\n    var el = element.elOuter;\n    var rect = el.getBoundingClientRect();\n    var elHeight = el.offsetHeight;\n    var elWidth = el.offsetWidth;\n    var scrollY = window.pageYOffset; // NOTE: offsetYMax and offsetYMin are percents\n    // based of the height of the element. They must be\n    // calculated as px to correctly determine whether\n    // the element is in the viewport.\n\n    var yPercent = yMax.unit === '%' || yMin.unit === '%';\n    var xPercent = xMax.unit === '%' || xMin.unit === '%'; // X offsets\n\n    var yMinPx = yMin.value;\n    var yMaxPx = yMax.value;\n\n    if (yPercent) {\n      var h100 = elHeight / 100;\n      yMaxPx = yMax.value * h100;\n      yMinPx = yMin.value * h100; // negative value\n    } // Y offsets\n\n\n    var xMinPx = xMax.value;\n    var xMaxPx = xMin.value;\n\n    if (xPercent) {\n      var w100 = elWidth / 100;\n      xMaxPx = xMax.value * w100;\n      xMinPx = xMin.value * w100; // negative value\n    } // NOTE: must add the current scroll position when the\n    // element is checked so that we get its absolute position\n    // relative to the document and not the viewport then\n    // add the min/max offsets calculated above.\n\n\n    var top = 0;\n    var bottom = 0;\n\n    if (slowerScrollRate) {\n      top = rect.top + scrollY + yMinPx;\n      bottom = rect.bottom + scrollY + yMaxPx;\n    } else {\n      top = rect.top + scrollY + yMaxPx * -1;\n      bottom = rect.bottom + scrollY + yMinPx * -1;\n    } // NOTE: Total distance the element will move from when\n    // the top enters the view to the bottom leaving\n    // accounting for elements height and max/min offsets.\n\n\n    var totalDist = windowHeight + (elHeight + Math.abs(yMinPx) + yMaxPx);\n    element.attributes = {\n      top: top,\n      bottom: bottom,\n      elHeight: elHeight,\n      elWidth: elWidth,\n      yMaxPx: yMaxPx,\n      yMinPx: yMinPx,\n      xMaxPx: xMaxPx,\n      xMinPx: xMinPx,\n      totalDist: totalDist\n    };\n  }\n  /**\n   * Takes a parallax element and parses the offset props to get the value\n   * and unit. Sets these values as offset object accessible on the element.\n   * @param {object} element\n   */\n\n\n  function _setupOffsets(element) {\n    var _element$props = element.props,\n        offsetYMin = _element$props.offsetYMin,\n        offsetYMax = _element$props.offsetYMax,\n        offsetXMax = _element$props.offsetXMax,\n        offsetXMin = _element$props.offsetXMin;\n    var yMin = (0, _index.parseValueAndUnit)(offsetYMin);\n    var yMax = (0, _index.parseValueAndUnit)(offsetYMax);\n    var xMin = (0, _index.parseValueAndUnit)(offsetXMax);\n    var xMax = (0, _index.parseValueAndUnit)(offsetXMin);\n\n    if (xMin.unit !== xMax.unit || yMin.unit !== yMax.unit) {\n      throw new Error('Must provide matching units for the min and max offset values of each axis.');\n    }\n\n    var xUnit = xMin.unit || '%';\n    var yUnit = yMin.unit || '%';\n    element.offsets = {\n      xUnit: xUnit,\n      yUnit: yUnit,\n      yMin: yMin,\n      yMax: yMax,\n      xMin: xMin,\n      xMax: xMax\n    };\n  }\n  /**\n   * Takes a parallax element and set the styles based on the\n   * offsets and percent the element has moved though the viewport.\n   * @param {object} element\n   */\n\n\n  function _setParallaxStyles(element) {\n    var top = element.attributes.top - scrollY;\n    var totalDist = element.attributes.totalDist; // Percent the element has moved based on current and total distance to move\n\n    var percentMoved = (top * -1 + windowHeight) / totalDist * 100; // Scale percentMoved to min/max percent determined by offset props\n\n    var slowerScrollRate = element.props.slowerScrollRate; // Get the parallax X and Y offsets\n\n    var offsets = (0, _index.getParallaxOffsets)(element.offsets, percentMoved, slowerScrollRate); // Apply styles\n\n    var el = element.elInner; // prettier-ignore\n\n    el.style.transform = 'translate3d(' + offsets.x.value + offsets.x.unit + ', ' + offsets.y.value + offsets.y.unit + ', 0)';\n  }\n  /**\n   * Takes a parallax element and removes parallax offset styles.\n   * @param {object} element\n   */\n\n\n  function _resetStyles(element) {\n    var el = element.elInner;\n    el.style.transform = '';\n  }\n  /**\n   * -------------------------------------------------------\n   * Public methods\n   * -------------------------------------------------------\n   */\n\n  /**\n   * Gets the parallax elements in the controller\n   * @return {array} parallax elements\n   */\n\n\n  this.getElements = function () {\n    return elements;\n  };\n  /**\n   * Creates a new parallax element object with new id\n   * and options to store in the 'elements' array.\n   * @param {object} options\n   * @return {object} element\n   */\n\n\n  this.createElement = function (options) {\n    var id = _createID();\n\n    var newElement = _extends({\n      id: id\n    }, options);\n\n    var updatedElements = [].concat(_toConsumableArray(elements), [newElement]);\n    elements = updatedElements;\n    this.update();\n    return newElement;\n  };\n  /**\n   * Creates a new parallax element object with new id\n   * and options to store in the 'elements' array.\n   * @param {object} element\n   */\n\n\n  this.removeElement = function (element) {\n    var updatedElements = elements.filter(function (el) {\n      return el.id !== element.id;\n    });\n    elements = updatedElements;\n  };\n  /**\n   * Updates an existing parallax element object with new options.\n   * @param {object} element\n   * @param {object} options\n   */\n\n\n  this.updateElement = function (element, options) {\n    var updatedElements = elements.map(function (el) {\n      // create element with new options and replaces the old\n      if (el.id === element.id) {\n        // update props\n        el.props = options.props;\n      }\n\n      return el;\n    });\n    elements = updatedElements; // call update to set attributes and positions based on the new options\n\n    this.update();\n  };\n  /**\n   * Remove element styles.\n   * @param {object} element\n   */\n\n\n  this.resetElementStyles = function (element) {\n    _resetStyles(element);\n  };\n  /**\n   * Updates all parallax element attributes and postitions.\n   */\n\n\n  this.update = function () {\n    _setWindowHeight();\n\n    _updateElementAttributes();\n\n    _updateElementPositions();\n  };\n  /**\n   * Removes listeners, reset all styles then nullifies the global ParallaxController.\n   */\n\n\n  this.destroy = function () {\n    _removeListeners();\n\n    _removeParallaxStyles();\n\n    window.ParallaxController = null;\n  };\n}\n/**\n * Static method to instantiate the ParallaxController.\n * Returns a new or existing instance of the ParallaxController.\n * @returns {Object} ParallaxController\n */\n\n\nParallaxController.init = function () {\n  var hasWindow = typeof window !== 'undefined';\n\n  if (!hasWindow) {\n    throw new Error('Looks like ParallaxController.init() was called on the server. This method must be called on the client.');\n  }\n\n  var controller = new ParallaxController(); // Keep global reference for legacy versions <= 1.1.0\n\n  if (hasWindow && !window.ParallaxController) {\n    window.ParallaxController = controller;\n  }\n\n  return controller;\n};\n\nexports.default = ParallaxController;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}