{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar _createClass = function () {\n  function defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n      var descriptor = props[i];\n      descriptor.enumerable = descriptor.enumerable || false;\n      descriptor.configurable = true;\n      if (\"value\" in descriptor) descriptor.writable = true;\n      Object.defineProperty(target, descriptor.key, descriptor);\n    }\n  }\n\n  return function (Constructor, protoProps, staticProps) {\n    if (protoProps) defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) defineProperties(Constructor, staticProps);\n    return Constructor;\n  };\n}();\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _propTypes = require('prop-types');\n\nvar _propTypes2 = _interopRequireDefault(_propTypes);\n\nvar _propValidation = require('../utils/propValidation');\n\nvar _ParallaxController = require('../libs/ParallaxController');\n\nvar _ParallaxController2 = _interopRequireDefault(_ParallaxController);\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nvar Parallax = function (_Component) {\n  _inherits(Parallax, _Component);\n\n  function Parallax() {\n    var _ref;\n\n    var _temp, _this, _ret;\n\n    _classCallCheck(this, Parallax);\n\n    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {\n      args[_key] = arguments[_key];\n    }\n\n    return _ret = (_temp = (_this = _possibleConstructorReturn(this, (_ref = Parallax.__proto__ || Object.getPrototypeOf(Parallax)).call.apply(_ref, [this].concat(args))), _this), _this.mapRefOuter = function (ref) {\n      _this._outer = ref;\n    }, _this.mapRefInner = function (ref) {\n      _this._inner = ref;\n    }, _temp), _possibleConstructorReturn(_this, _ret);\n  }\n\n  _createClass(Parallax, [{\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      // Make sure the provided controller is an instance of the Parallax Controller\n      var isInstance = this.controller instanceof _ParallaxController2.default; // Throw if neither context or global is available\n\n      if (!this.controller && !isInstance) {\n        throw new Error(\"Must wrap your application's <Parallax /> components in a <ParallaxProvider />.\");\n      } // Deprecation warning for <=1.0.0\n      // If no context is available but the window global is then warn\n\n\n      if (!this.context.parallaxController && window.ParallaxController) {\n        console.log('Calling ParallaxController.init() has been deprecated in favor of using the <ParallaxProvider /> component. For usage details see: https://github.com/jscottsmith/react-scroll-parallax/tree/v1.1.0#usage');\n      } // create a new parallax element and save the reference\n\n\n      this.element = this.controller.createElement({\n        elInner: this._inner,\n        elOuter: this._outer,\n        props: {\n          disabled: this.props.disabled,\n          offsetXMax: this.props.offsetXMax,\n          offsetXMin: this.props.offsetXMin,\n          offsetYMax: this.props.offsetYMax,\n          offsetYMin: this.props.offsetYMin,\n          slowerScrollRate: this.props.slowerScrollRate\n        }\n      });\n    }\n  }, {\n    key: 'componentWillReceiveProps',\n    value: function componentWillReceiveProps(nextProps) {\n      // updates the elements props when relevant parallax props change\n      if (this.props.disabled !== nextProps.disabled || this.props.offsetXMax !== nextProps.offsetXMax || this.props.offsetXMin !== nextProps.offsetXMin || this.props.offsetYMax !== nextProps.offsetYMax || this.props.offsetYMin !== nextProps.offsetYMin || this.props.slowerScrollRate !== nextProps.slowerScrollRate) {\n        this.controller.updateElement(this.element, {\n          props: {\n            disabled: nextProps.disabled,\n            offsetXMax: nextProps.offsetXMax,\n            offsetXMin: nextProps.offsetXMin,\n            offsetYMax: nextProps.offsetYMax,\n            offsetYMin: nextProps.offsetYMin,\n            slowerScrollRate: nextProps.slowerScrollRate\n          }\n        });\n      } // resets element styles when disabled\n\n\n      if (this.props.disabled !== nextProps.disabled && nextProps.disabled) {\n        this.controller.resetElementStyles(this.element);\n      }\n    }\n  }, {\n    key: 'componentWillUnmount',\n    value: function componentWillUnmount() {\n      this.controller.removeElement(this.element);\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var _props = this.props,\n          children = _props.children,\n          className = _props.className,\n          Tag = _props.tag,\n          styleOuter = _props.styleOuter,\n          styleInner = _props.styleInner;\n      var rootClass = 'parallax-outer' + (className ? ' ' + className : '');\n      return _react2.default.createElement(Tag, {\n        className: rootClass,\n        ref: this.mapRefOuter,\n        style: styleOuter\n      }, _react2.default.createElement('div', {\n        className: 'parallax-inner',\n        ref: this.mapRefInner,\n        style: styleInner\n      }, children));\n    }\n  }, {\n    key: 'controller',\n    get: function get() {\n      // Legacy versions may use the global, not context\n      return this.context.parallaxController || window.ParallaxController;\n    } // refs\n\n  }]);\n\n  return Parallax;\n}(_react.Component);\n\nParallax.defaultProps = {\n  disabled: false,\n  offsetYMax: 0,\n  offsetYMin: 0,\n  offsetXMax: 0,\n  offsetXMin: 0,\n  slowerScrollRate: false,\n  // determines whether scroll rate is faster or slower than standard scroll\n  tag: 'div'\n};\nParallax.propTypes = {\n  children: _propTypes2.default.node,\n  className: _propTypes2.default.string,\n  disabled: _propTypes2.default.bool.isRequired,\n  offsetXMax: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  offsetXMin: _propTypes2.default.oneOfType([_propTypes2.default.string, _propTypes2.default.number]),\n  offsetYMax: _propValidation.offsetMax,\n  offsetYMin: _propValidation.offsetMin,\n  slowerScrollRate: _propTypes2.default.bool.isRequired,\n  styleOuter: _propTypes2.default.object,\n  styleInner: _propTypes2.default.object,\n  tag: _propTypes2.default.string.isRequired\n};\nParallax.contextTypes = {\n  parallaxController: _propTypes2.default.object // not required because this could be rendered on the server.\n\n};\nexports.default = Parallax;\nmodule.exports = exports['default'];","map":null,"metadata":{},"sourceType":"script"}